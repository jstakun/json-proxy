<?xml version="1.0" encoding="UTF-8"?>
<routes id="json-proxy-routes" xmlns="http://camel.apache.org/schema/spring"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://camel.apache.org/schema/spring https://camel.apache.org/schema/spring/camel-spring-3.18.0.xsd">
    <route id="predictions">
        <from uri="direct:predictions"/>
        <doTry>
	        <!-- enrich with x-redhat-uid header and type -->
        	<choice>
    	        <when>
        	        <simple>${headers.x-redhat-uid} == null</simple>
            	    <setHeader name="x-redhat-uid">
                	    <simple>${properties:app.default.user}</simple>
                	</setHeader>
            	</when>
        	</choice>
        	<removeHeaders pattern="CamelHttp*"/>
        	<choice>
        		<when>
        	    	<simple>${properties:app.log.request} =~ 'true'</simple>
        	        <setHeader name="x-redhat-type">
            			<constant>request</constant>
        			</setHeader>
        			<log loggingLevel="INFO" message="\n--- Predictions ${headers.x-redhat-type} ---\nRequest body:\n${body}\nRequest headers:\n${headers}\n---"/>
        	    	<wireTap uri="direct:log"/>
        		</when>
        		<otherwise>
        		    <log loggingLevel="INFO" message="Skipped logging request due to app.log.request == ${properties:app.log.request}"/>
        		</otherwise>
        	</choice>	    
        	<to uri="{{backend.url}}?bridgeEndpoint=false"/>
        	<choice>
        		<when>
        	    	<simple>${properties:app.log.response} =~ 'true'</simple>
        	        <setHeader name="x-redhat-type">
                 		<constant>response</constant>
        			</setHeader>
        			<log loggingLevel="INFO" message="\n--- Predictions ${headers.x-redhat-type} ---\nResponse body:\n${body}\nResponse headers:\n${headers}\n---"/>
        	    	<wireTap uri="direct:log"/>
        		</when> 
        		<otherwise>
        		    <log loggingLevel="INFO" message="Skipped logging response due to app.log.response == ${properties:app.log.response}"/>
        		</otherwise>
        	</choice>	    
        	<removeHeaders pattern="x-redhat*"/>
        	<choice> 
        		<when>
            		<simple>${headers.accept-encoding} contains 'gzip'</simple>
					<marshal>
						<gzipDeflater id="gzip"/>
					</marshal>
					<setHeader name="content-encoding">
            			<constant>gzip</constant>
        			</setHeader>
        		</when>
		    </choice>
        	<doCatch>
                        <exception>java.lang.Exception</exception>
                        <to uri="direct:logError"/>
             </doCatch>
         </doTry>
    </route>
    <route id="log">
        <from uri="direct:log"/>
        <removeHeaders pattern="CamelHttp*"/>
        <setHeader name="CamelHttpMethod">
            <constant>POST</constant>
        </setHeader>
        <setHeader name="Content-Type">
            <constant>application/json</constant>
        </setHeader>
        <setBody>
            <simple>{"type": "${headers.x-redhat-type}", "uid": "${headers.x-redhat-uid}", "content": ${body}}</simple>
        </setBody>
        <log loggingLevel="INFO" message="\n--- Logger request ---\nRequest body:\n${body}\nRequest headers:\n${headers}\n---"/>
        <to uri="{{logger.url}}?bridgeEndpoint=false"/>
        <log loggingLevel="INFO" message="\n--- Logger response ---\nResponse body:\n${body}\nResponse headers:\n${headers}\n---"/>
    </route>
    <route id="Log error">
        <from uri="direct:logError"/>
        <log logName="net.gmsworld.server.camel" loggingLevel="ERROR" message="Operation failed with exception: ${exception.stacktrace}"/>
        <setBody>
            <constant>{"error" : "Operation failed"}</constant>
        </setBody>
        <removeHeaders pattern="*"/>
        <setHeader name="CamelHttpResponseCode">
            <constant>500</constant>
        </setHeader>
    </route>
    <!--route id="proxy">
        <from uri="direct:proxy"/> 
    	<log loggingLevel="INFO" message="Proxy\nRequest body:\n${body}"/>
    	<setBody>
            <simple>{"status": "ok"}</simple>
        </setBody>
    </route-->
    <!--route id="Process output">
        <from uri="direct:processOutput"/>
        <marshal>
            <json id="json" library="Jackson"/>
        </marshal>
        <removeHeaders pattern="*"/>
    </route-->
</routes>
